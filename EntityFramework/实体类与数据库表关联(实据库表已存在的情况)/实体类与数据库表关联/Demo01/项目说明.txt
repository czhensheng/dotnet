
本项目是针对数据库表已存在的情况，想要引入EF对其进行操作的情况
先引入Nuget包：EntityFramework
配置连接字符串：
  <connectionStrings>
    <add name="base" connectionString="Data Source=.;Initial Catalog=Study;User ID=sa;Password=czhensheng;Integrated Security=SSPI" providerName="System.Data.SqlClient"/>
  </connectionStrings>
备注：字符串中的name="base" 会作为连接字符串使用

创建实体对象类（用来与数据库表相关，具体看个人需求），本例测试用例为：
    public class Donator
    {
        public int DonatorId { get; set; }
        public string Name { get; set; }
        public decimal Amount { get; set; }
        public DateTime DonateDate { get; set; }
    }

创建数据库上下文（数据库的抽象）
本例实例如下：
 public class Context : DbContext
    {
        public Context() : base("name=base") { }
        public virtual IDbSet<Donator> Donators { get; set; }
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            //公约
            modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();
            modelBuilder.Conventions.Remove<IncludeMetadataConvention>();
            //关联到配置方法  
            AddEntityMapping(modelBuilder);
            base.OnModelCreating(modelBuilder);
        }

        /// <summary>  
        /// 制定类对类对象进行配置  
        /// </summary>  
        /// <param name="modelBuilder"></param>  
        private void AddEntityMapping(DbModelBuilder modelBuilder)
        {
            modelBuilder.Configurations.Add(new DonatorMapping());
        }
    }

    /// <summary>
    /// 对类对象进行构造 
    /// </summary>
    public class DonatorMapping : EntityTypeConfiguration<Donator>
    {
        public DonatorMapping()
        {
            this.ToTable("Donator");     //指定表名
            this.HasKey(x => x.DonatorId);	// 主键名称
            this.Property(x => x.Name).HasMaxLength(20);   // 长度
        }
    }

最终使用的时候就可以像直接操作ef一样操作相应的数据库表，参考如下:
class Program
    {
        static void Main(string[] args)
        {
            Context context = new Context();
            var data = context.Donators.ToList();
            Console.WriteLine(data.Count);
            Console.ReadLine();
        }
    }